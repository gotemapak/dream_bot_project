import os
import logging
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
import openai
from analytics import DreamAnalytics
from datetime import datetime

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Initialize OpenAI client and analytics
client = openai.OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
analytics = DreamAnalytics()

# Dictionary to store user's dreams context
user_dreams = {}  # Format: {user_id: [{"dream": text, "interpretation": text, "timestamp": datetime, "id": int}, ...]}

def get_main_keyboard():
    """Get the main menu keyboard."""
    keyboard = [
        [
            InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è —Å–Ω–æ–≤", callback_data="dream_history"),
            InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
        ],
        [
            InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    welcome_message = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î—Ä–∏–º–∏ ‚Äî –±–æ—Ç–∞ –¥–ª—è —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è —Å–Ω–æ–≤!\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ —Ç–≤–æ–µ–≥–æ —Å–Ω–∞.\n"
        "–¢—ã –º–æ–∂–µ—à—å:\n"
        "üó£ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å–Ω–∞\n"
        "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π —Å–æ–Ω —Ç–µ–∫—Å—Ç–æ–º\n\n"
        "–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ –∏ —Ä–∞—Å—Å–∫–∞–∂—É, —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç –∑–Ω–∞—á–∏—Ç—å. üåô‚ú®"
    )
    await update.message.reply_text(welcome_message, reply_markup=get_main_keyboard())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /help is issued."""
    help_text = (
        "ü§î –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é?\n\n"
        "–ù–∞–ø–∏—à–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞ ‚Äî @ArtemyPak\n"
        "–ë—É–¥—É —Ä–∞–¥ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏! ‚ú®"
    )
    await update.message.reply_text(help_text)

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle voice messages."""
    try:
        # Download the voice message
        voice_file = await update.message.voice.get_file()
        voice_path = f"temp_voice_{update.message.from_user.id}.ogg"
        await voice_file.download_to_drive(voice_path)

        # Inform user that processing has started
        await update.message.reply_text("ü§î –†–∞–∑–±–∏—Ä–∞—é—Å—å –≤ —Ç–≤–æ—ë–º —Å–Ω–µ‚Ä¶ –î–∞–π –º–Ω–µ —Å–µ–∫—É–Ω–¥–æ—á–∫—É! üòä")

        # Transcribe the voice message using Whisper API
        with open(voice_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file
            )

        # Remove the temporary voice file
        os.remove(voice_path)

        # Process the transcribed text
        await process_dream(update, transcript.text, message_type='voice')

    except Exception as e:
        logger.error(f"Error processing voice message: {str(e)}")
        analytics.log_error('voice_processing', str(e))
        await update.message.reply_text(
            "‚ùå –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ‚Ä¶ –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–Ω –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞!"
        )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text messages."""
    await process_dream(update, update.message.text, message_type='text')

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle button presses."""
    query = update.callback_query
    await query.answer()  # Answer the callback query to remove the loading state
    
    user_id = str(query.from_user.id)
    
    if query.data == "dream_history":
        if user_id not in user_dreams or not user_dreams[user_id]:
            await query.message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–Ω–æ–≤. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ —Å–≤–æ–π —Å–æ–Ω, "
                "–∏ —è –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–∏! üåô"
            )
            return
            
        for dream in reversed(user_dreams[user_id]):
            date = dream['timestamp'].strftime('%d.%m.%Y')
            dream_preview = dream['dream'][:150] + "..." if len(dream['dream']) > 150 else dream['dream']
            interpretation_preview = dream['interpretation'][:150] + "..." if len(dream['interpretation']) > 150 else dream['interpretation']
            
            keyboard = [[InlineKeyboardButton("üìñ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"show_dream_{dream['id']}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            history_text = (
                f"üåü {date}\n\n"
                f"üí≠ –í–∞—à —Å–æ–Ω:\n{dream_preview}\n\n"
                f"‚ú® –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ:\n{interpretation_preview}"
            )
            
            await query.message.reply_text(history_text, reply_markup=reply_markup)
    
    elif query.data.startswith("show_dream_"):
        dream_id = int(query.data.split("_")[2])
        for dream in user_dreams[user_id]:
            if dream['id'] == dream_id:
                full_text = (
                    f"üåü {dream['timestamp'].strftime('%d.%m.%Y')}\n\n"
                    f"üí≠ –í–∞—à —Å–æ–Ω:\n{dream['dream']}\n\n"
                    f"‚ú® –ü–æ–ª–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ:\n{dream['interpretation']}"
                )
                
                # Create keyboard with options after showing full dream
                keyboard = [
                    [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data=f"ask_followup_{dream_id}")],
                    [InlineKeyboardButton("üìñ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å–Ω–æ–≤", callback_data="dream_history")],
                    [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.message.reply_text(full_text, reply_markup=reply_markup)
                break
    
    elif query.data.startswith("ask_followup_"):
        dream_id = int(query.data.split("_")[2])
        for dream in user_dreams[user_id]:
            if dream['id'] == dream_id:
                await query.message.reply_text(
                    "üí≠ –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ–± —ç—Ç–æ–º —Å–Ω–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ.\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                    "‚Ä¢ –ß—Ç–æ —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç [–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª]?\n"
                    "‚Ä¢ –ü–æ—á–µ–º—É –≤–æ —Å–Ω–µ –ø–æ—è–≤–∏–ª—Å—è [—ç–ª–µ–º–µ–Ω—Ç —Å–Ω–∞]?\n"
                    "‚Ä¢ –ú–æ–∂–µ—à—å –æ–±—ä—è—Å–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ [—á–∞—Å—Ç—å —Å–Ω–∞]?"
                )
                break
    
    elif query.data == "help":
        help_text = (
            "ü§î –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
            "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–∞—à–µ–≥–æ —Å–Ω–∞\n"
            "2Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏\n"
            "3Ô∏è‚É£ –ó–∞–¥–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
            "üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            "‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ —Å–æ–Ω –ø–æ–¥—Ä–æ–±–Ω–æ\n"
            "‚Ä¢ –í–∫–ª—é—á–∞–π—Ç–µ –¥–µ—Ç–∞–ª–∏ –∏ —ç–º–æ—Ü–∏–∏\n"
            "‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö\n\n"
            "‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞ ‚Äî @ArtemyPak"
        )
        await query.message.reply_text(help_text)
    
    elif query.data == "stats":
        usage = analytics.get_user_monthly_usage(int(user_id))
        remaining = 20 - usage['total_dreams']
        remaining_days = 30 - datetime.now().day
        
        stats_text = (
            "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üéØ –î–æ—Å—Ç—É–ø–Ω–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π: {remaining} –∏–∑ 20\n"
            f"üó£ –ì–æ–ª–æ—Å–æ–≤—ã—Ö —Å–Ω–æ–≤: {usage['voice_messages']}\n"
            f"‚úçÔ∏è –¢–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–Ω–æ–≤: {usage['text_messages']}\n"
            f"üåü –í—Å–µ–≥–æ —Å–Ω–æ–≤: {usage['total_dreams']}\n\n"
            f"‚ÑπÔ∏è –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ {remaining_days} –¥–Ω–µ–π"
        )
        await query.message.reply_text(stats_text)

async def process_dream(update: Update, dream_text: str, message_type: str = 'text'):
    """Process the dream text and generate an interpretation."""
    try:
        user_id = str(update.effective_user.id)
        
        # Initialize user's dream history if not exists
        if user_id not in user_dreams:
            user_dreams[user_id] = []
        
        # Check if this is a follow-up question
        is_follow_up = any(keyword in dream_text.lower() for keyword in [
            '–ø–æ—á–µ–º—É', '—á—Ç–æ –∑–Ω–∞—á–∏—Ç', '–º–æ–∂–µ—à—å –æ–±—ä—è—Å–Ω–∏—Ç—å', '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ', 
            '—á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç', '–∫–∞–∫ —ç—Ç–æ –ø–æ–Ω–∏–º–∞—Ç—å', '—É—Ç–æ—á–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏', '–ø–æ—è—Å–Ω–∏'
        ])

        # Check monthly limit before processing
        if not analytics.check_monthly_limit(update.effective_user.id, message_type):
            remaining_days = 30 - datetime.now().day
            await update.message.reply_text(
                "üåô –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π (20 —Å–Ω–æ–≤).\n"
                f"–ù–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ {remaining_days} –¥–Ω–µ–π.\n\n"
                "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –±–æ—Ç–æ–º! ‚ú®"
            )
            return

        # Inform user that interpretation is in progress
        processing_message = await update.message.reply_text(
            "ü§î –†–∞–∑–±–∏—Ä–∞—é—Å—å –≤ —Ç–≤–æ—ë–º —Å–Ω–µ‚Ä¶ –î–∞–π –º–Ω–µ —Å–µ–∫—É–Ω–¥–æ—á–∫—É! üòä"
        )

        messages = [
            {"role": "system", "content": """–¢—ã —Ç–æ–ª–∫–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—á–µ—Ç–∞–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤. –¢–≤–æ–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º–∏, –≥–ª—É–±–æ–∫–∏–º–∏ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º–∏. –û—Ç–≤–µ—á–∞–π –º—è–≥–∫–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ, –ø–æ–º–æ–≥–∞—è —á–µ–ª–æ–≤–µ–∫—É –æ—Å–æ–∑–Ω–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–Ω–∞, –Ω–æ –Ω–µ –Ω–∞–≤—è–∑—ã–≤–∞—è –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤.

**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–Ω–∞:**
1. –ù–∞—á–Ω–∏ —Å –∫—Ä–∞—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Å–∫–∞–∑–∞ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ —Å–Ω–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
2. –í—ã–¥–µ–ª–∏ 2-3 –≥–ª–∞–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞ –∏–ª–∏ —Ç–µ–º—ã
3. –û–±—ä—è—Å–Ω–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
4. –°–≤—è–∂–∏ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π —á–µ–ª–æ–≤–µ–∫–∞
5. –ó–∞–≤–µ—Ä—à–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º –∏–ª–∏ –∏–Ω—Å–∞–π—Ç–æ–º

**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:**
1. –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∞—Å–ø–µ–∫—Ç–µ –∏–ª–∏ —Å–∏–º–≤–æ–ª–µ, –æ –∫–æ—Ç–æ—Ä–æ–º —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫
2. –î–∞–π –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –∞—Å–ø–µ–∫—Ç–∞
3. –°–≤—è–∂–∏ –µ–≥–æ —Å –æ–±—â–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Å–Ω–∞

**–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:**
- –ò—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–Ω
- –ò–∑–±–µ–≥–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—á–Ω—ã—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã "–≤–æ–∑–º–æ–∂–Ω–æ", "—ç—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å", "—á–∞—Å—Ç–æ —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç"
- –ù–µ –¥–∞–≤–∞–π —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏
- –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –∏ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏"""}
        ]

        # Add context from previous dream if this is a follow-up question
        if is_follow_up and user_dreams[user_id]:
            last_dream = user_dreams[user_id][-1]  # Get the most recent dream
            messages.extend([
                {"role": "user", "content": f"–í–æ—Ç –º–æ–π —Å–æ–Ω: {last_dream['dream']}"},
                {"role": "assistant", "content": last_dream['interpretation']},
                {"role": "user", "content": dream_text}
            ])
        else:
            messages.append({"role": "user", "content": f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–æ–≥–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ —Å–Ω–∞: {dream_text}"})

        # Generate dream interpretation using GPT-4
        response = client.chat.completions.create(
            model="gpt-4",
            messages=messages,
            max_tokens=600,
            temperature=0.6
        )

        interpretation = response.choices[0].message.content

        # Get current date in Russian format
        current_date = datetime.now().strftime('%d.%m.%Y')
        
        # Get user's remaining interpretations for the month
        usage = analytics.get_user_monthly_usage(update.effective_user.id)
        remaining = 20 - usage["total_dreams"]

        # Create inline keyboard for the interpretation message
        keyboard = [
            [InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è —Å–Ω–æ–≤", callback_data="dream_history")],
            [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # Send the interpretation with remaining count and buttons
        sent_message = await processing_message.edit_text(
            f"‚ú® –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Å–Ω–∞ ({current_date}):\n\n{interpretation}\n\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {remaining} –∏–∑ 20\n\n"
            "üí≠ –•–æ—á–µ—à—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –∫–∞–∫–æ–º-—Ç–æ –º–æ–º–µ–Ω—Ç–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ? –°–ø—Ä–∞—à–∏–≤–∞–π, —è –ø–æ–º–æ–≥—É! üòä",
            reply_markup=reply_markup
        )

        # Store the new dream and interpretation if it's not a follow-up question
        if not is_follow_up:
            dream_id = len(user_dreams[user_id]) + 1
            user_dreams[user_id].append({
                "dream": dream_text,
                "interpretation": interpretation,
                "timestamp": datetime.now(),
                "id": dream_id
            })
            # Keep only last 5 dreams to manage memory
            if len(user_dreams[user_id]) > 5:
                user_dreams[user_id] = user_dreams[user_id][-5:]

        # Log the interaction
        analytics.log_dream_interpretation(
            user_id=update.effective_user.id,
            message_type=message_type,
            dream_text=dream_text,
            tokens_used=response.usage.total_tokens
        )

    except Exception as e:
        logger.error(f"Error interpreting dream: {str(e)}")
        analytics.log_error('dream_interpretation', str(e))
        await update.message.reply_text(
            "‚ùå –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ‚Ä¶ –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–Ω –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞!"
        )

def main():
    """Start the bot."""
    # Create the Application
    application = Application.builder().token(os.getenv('TELEGRAM_BOT_TOKEN')).build()

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(CallbackQueryHandler(button_handler))

    # Start the Bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 